# ------------------- App Deployment ------------------- #
apiVersion: apps/v1
kind: Deployment
#kind: DaemonSet
metadata:
  name: nginx-demo-server
spec:
  replicas: 1           #relicas指定容器副本数量，默认为1

  ##升级回滚策略
  revisionHistoryLimit: 10  #用来设置保留的历史记录数量，默认为2，设置为0时将不能回滚～～
  minReadySeconds: 5        #滚动升级5s后认为该pod就绪,相当于控制升级速度(生产须设置至少90秒,这样能保证处于就绪状态的pod能经历一个完整的活性探测周期)
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1        #滚动升级时会先启动1个pod(可配百分比)
      maxUnavailable: 0  #滚动升级时允许的最大Unavailable的pod个数(可配百分比)  当副本为1时须配置为0，否则升级过程中将没有可用副本

  selector:
    matchLabels:
      app: nginx-demo-server
  template:
    metadata:
      labels:
        app: nginx-demo-server
    spec:
      containers:
        - name: nginx-demo-server
          #image: 'nginxinc/ingress-demo'
          image: 'system386/nginx-ingress-demo:0.3'
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "0.5"             #限制pod申请最大的cpu数量为1个cpu
              memory: 1Gi          #申请内存最大值
            requests:
              cpu: "0.2"           #pod申请的cpu数量为0.5个cpu
              memory: 512Mi        #申请内存的最小值

          # 存活检测
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1 
            tcpSocket:
              port: 80
            timeoutSeconds: 1
          # 就绪检测
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            tcpSocket:
              port: 80
            timeoutSeconds: 1

      # 优雅退出
      # 由于应用处理请求最长耗时40秒,为了让其在关闭前能够处理完已到达服务端的请求,设置60秒的优雅关闭时间
      terminationGracePeriodSeconds: 60 #k8s将会给应用发送SIGTERM信号,可以用来正确、优雅地关闭应用,默认为30秒


---
# ------------------- App Service ------------------- #
apiVersion: v1
kind: Service
metadata:
  name: nginx-demo-service
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/affinity: "true"
    nginx.ingress.kubernetes.io/session-cookie-name: backend
#    nginx.ingress.kubernetes.io/load-balancer-method: drr


spec:
  selector:
    app: nginx-demo-server
  ports:
  - name: web
    port: 80
    targetPort: 80
---
# ------------------- App Ingress ------------------- #
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nginx-demo-web
  namespace: default
  annotations:
    #ingress使用那种软件 
    kubernetes.io/ingress.class: nginx
    #配置websocket需要的配置   
    #nginx.ingress.kubernetes.io/configuration-snippet: |
    #   proxy_set_header Upgrade "websocket";
    #   proxy_set_header Connection "Upgrade";
    # 代理发送超时
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    # 代理读取超时
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    # 代理连接超时
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    # 基于客户端出口ip哈希
    nginx.ingress.kubernetes.io/upstream-hash-by: "$http_x_forwarded_for"
spec:
  rules:
  - host: test-nginx-demo.e-buychina.com
    http:
      paths:
      - path: /
        backend:
          serviceName: nginx-demo-service
          servicePort: web
  tls:
    - secretName: ebuy-secret

---
# ------------------- HPA ------------------- #
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-nginx-demo
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment    # 基于Deployment进行扩缩
    name: nginx-demo-server    # Deployment名    
  minReplicas: 1     # 最小实例数
  maxReplicas: 10    # 最大实例数

  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 85
  - type: Resource
    resource:
      name: memory
      targetAverageValue: 1024Mi
